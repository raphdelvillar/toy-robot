{
  "version": 3,
  "sources": ["../../app/root.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.jsx\");\n  import.meta.hot.lastModified = \"1698345417582.5562\";\n}\n// REMIX HMR END\n\nimport { Links, Meta, Outlet, ScrollRestoration, Scripts, LiveReload, useRouteError } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nvar astilectron_load = () => {\n  document.addEventListener('astilectron-ready', e => {\n    console.log(\"astilectron-ready\");\n    console.log(e);\n    e.path[1].astilectron.onMessage(message => {\n      console.log(message);\n    });\n  });\n};\nexport default function App() {\n  _s();\n  const error = useRouteError();\n  console.log(error);\n  useEffect(() => {\n    astilectron_load();\n  }, []);\n  return <html lang=\"en\">\n        <head>\n            <meta charSet=\"utf-8\" />\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n            <Links />\n            <Meta />\n        </head>\n        <body>\n            <Outlet />\n            <ScrollRestoration />\n            <Scripts />\n            <LiveReload />\n        </body>\n    </html>;\n}\n_s(App, \"udw+RIxoU7ZF+z45E4mgOd2ebd4=\", false, function () {\n  return [useRouteError];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAAA,gBAA0B;AAmBd;AAxCZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AACd,cAAY,IAAI,eAAe;AACjC;AAKA,IAAI,mBAAmB,MAAM;AAC3B,WAAS,iBAAiB,qBAAqB,OAAK;AAClD,YAAQ,IAAI,mBAAmB;AAC/B,YAAQ,IAAI,CAAC;AACb,MAAE,KAAK,CAAC,EAAE,YAAY,UAAU,aAAW;AACzC,cAAQ,IAAI,OAAO;AAAA,IACrB,CAAC;AAAA,EACH,CAAC;AACH;AACe,SAAR,MAAuB;AAC5B,KAAG;AACH,QAAM,QAAQ,cAAc;AAC5B,UAAQ,IAAI,KAAK;AACjB,+BAAU,MAAM;AACd,qBAAiB;AAAA,EACnB,GAAG,CAAC,CAAC;AACL,SAAO,mDAAC,UAAK,MAAK,MACZ;AAAA,uDAAC,UACG;AAAA,yDAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,MACP,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,SAJV;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UACG;AAAA,yDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SAJhB;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAZC;AAAA;AAAA;AAAA;AAAA,SAaL;AACJ;AACA,GAAG,KAAK,gCAAgC,OAAO,WAAY;AACzD,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,KAAK;AAEtB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
